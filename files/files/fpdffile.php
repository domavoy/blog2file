<?php
class FpdfFile extends FileInterface{
  protected $pdf;

  const IMG_PATTERN = '<blog2file:Image/>';

  public function __construct($fileName){
    FileInterface::__construct($fileName);
    $this->pdf=new HTMLPDF();

    $this->pdf->SetSubject('Blog');
    $this->pdf->SetTitle('Blog');
    $this->pdf->SetCreator('Blog2file.com');
    $this->pdf->SetKeywords('blog');

    $this->pdf->SetMargins(25,30,20);
  }

  public function getDocumentExtension(){
    return ".pdf";
  }


  public function renderMainPage($name, $address, $userpicAddress = ''){
    $this->pdf->AddPage();
    $this->pdf->SetFont('ArialMT','',30);
    // blog name
    //TODO: 139.Logo for livejournal is fixed in code
    $this->pdf->Image(Options::IMG_LJLOGO,10,20);
    $this->pdf->Cell(0,20,Utils::utf8ToWin($name),0,0,'C');
    $this->pdf->Ln();
    // blog address
    $this->pdf->Cell(0,20,Utils::utf8ToWin($address),0,0,'C');
    $this->pdf->Line(5,70,200,70);
    // date
    $this->pdf->Ln(20);
    $this->pdf->SetFont('ArialMT','',16);
    $this->pdf->Image(Options::IMG_EARTH,70,100);
    if($userpicAddress != ''){
      $infoArray = $this->getImageInfo($userpicAddress);
      if(Options::BROKEN_IMG_URL != $infoArray['url']){
        $this->pdf->Image($infoArray['url'] ,160 ,25, $infoArray['x'], $infoArray['y'], $infoArray['type']);
      }
    }
    // generated by,,,
    $this->pdf->SetFont('ArialMT','',14);
    $this->pdf->Ln(180);
    $this->pdf->Cell(0,20,Utils::utf8ToWin(Lang::get(Lang::file_generated_with)),0,1,'R');
    $this->pdf->startPageNums();
  }

  public function renderTextHeader(){
    if($this->isPostNewPage == false){
      $this->pdf->AddPage();
    }
  }

  //var $_toc = array();
  public function renderPost($title, $date, $text){
    if($this->isPostNewPage == true){
      $this->pdf->AddPage();
    }else{
      $this->pdf->Ln(5);
    }
    // Post title
    $this->pdf->TOC_Entry(Utils::utf8ToWin($title), Utils::utf8ToWin($date));

    $this->pdf->SetFont('ArialMT','',18);
    $this->pdf->SetTextColor(0,0,120);
    $this->pdf->write(12, Utils::utf8ToWin(html_entity_decode($title,ENT_QUOTES, "windows-1251" )));
    // post line
    $this->pdf->SetDrawColor(70);
    $this->pdf->Line(25,$this->pdf->GetY() + 12,180,$this->pdf->GetY() + 12);
    $this->pdf->SetTextColor(128);
    $this->pdf->SetFont('ArialMT','',7);
    $this->pdf->Ln(12);
    $this->pdf->MultiCell(0,8, Utils::utf8ToWin($date,1,"R"));

    if($this->isDownloadImages){
      $this->renderTextPostWithImages( $text);
    }else{
      $this->renderTextPost( $text);
    }
  }

  public function renderTextPost($text){
    $this->pdf->SetFont('ArialMT','',10);
    $this->pdf->SetTextColor(0);
    $this->pdf->MultiCell(0,5, strip_tags(str_replace('<br />',"\n",Utils::utf8ToWin(html_entity_decode($text,ENT_QUOTES, "windows-1251" )))));
  }

  /**
   * Return information about image. If image not found, return default image
   * @param $imgUrl
   * @return array() array('url' => image address, 'type => image type(jpg, gif, png)', 'x', 'y')
   */
  private function getImageInfo($imgUrl){
    try{
      HtmlHelper::getImageContents($imgUrl);
      $imgSizeInfo = @getimagesize($imgUrl);
      if($imgSizeInfo['mime'] == 'image/gif'){
        $imageType = 'gif';
      } else if ($imgSizeInfo['mime'] == 'image/jpeg'){
        $imageType = 'jpg';
      } else if ($imgSizeInfo['mime'] == 'image/png'){
        $imageType = 'png';
      } else{
		throw new Exception("Image type not supported");
	  }
    }
    catch(Exception $e){
      Log::warn('File FPDF: Failed to load image - '.$imgUrl);
      $imgUrl = Options::BROKEN_IMG_URL;
      $imgSizeInfo = array(20,20);
      $imageType = 'png';
    }
    return array('url' => $imgUrl, 'type' => $imageType, 'x' => $imgSizeInfo[0] * 0.26, 'y' => $imgSizeInfo[1] * 0.26);
  }

  public function renderTextPostWithImages($postText){
    // Post text
    $this->pdf->SetFont('ArialMT','',10);
    $this->pdf->SetTextColor(0);

    /* INSERT POST WITH IMAGES */
    $text =  html_entity_decode(Utils::utf8ToWin($postText),ENT_QUOTES, "utf-8");
    // parse post into array ($link -> $imgsrc)
    $imgInfoArray = HtmlHelper::parseImageArray($text);
    // replace every links with our $this->IMG_PATTERN
    foreach($imgInfoArray as $imgInfo){
      $text = str_replace($imgInfo[0],FpdfFile::IMG_PATTERN,$text);
    }
    // split text on part, with $this->IMG_PATTERN delimeter
    $textData = split(FpdfFile::IMG_PATTERN, $text);
    // iterate by every text part(between images)
    $textPartCount = count($textData);
    for($i=0; $i < $textPartCount ; $i++ ){
      // write text
      //$this->pdf->WriteHTML($textData[$i]);
      $this->pdf->MultiCell(0,5, strip_tags(str_replace('<br />',"\n",$textData[$i])));
      if($i != ($textPartCount -1)){
        $imgUrl = $imgInfoArray[$i][1];

        // getting image info
        $infoArray = $this->getImageInfo($imgUrl);
        $imageType = $infoArray['type'];
        $imgUrl = $infoArray['url'];
        $imgI[0] = $infoArray['x'];
        $imgI[1] = $infoArray['y'];

        // if height > 180mm, then minimize image
        if($imgI[0] > 170){
          $imgI[1] =  $imgI[1] * (170/$imgI[0]);
          $imgI[0] = 170;

        }
        // if image don;t placed on this page
        if(210 < $this->pdf->GetY() + $imgI[1]){
          $this->pdf->AddPage();
        }

        try{
          $this->pdf->Image($imgUrl,$this->pdf->getX(),$this->pdf->getY(),$imgI[0],$imgI[1],$imageType);
        }
        catch(Exception $e){
          Log::error('File FPDF: failed to process images using FPDF: '.$e);
          //TODO: REF - move code to one function
          $imgUrl = Options::BROKEN_IMG_URL;
          $imgSizeInfo = array(20,20);
          $imgI = 'png';
          $this->pdf->Image($imgUrl,$this->pdf->getX(),$this->pdf->getY(),$imgI[0],$imgI[1],$imageType);

        }
        $this->pdf->setY($this->pdf->getY() +  $imgI[1]);
      }
    }
  }

  public function setBlogLogo($logopath){
  }

  public function renderEndPage(){
    $this->pdf->insertTOC(2, Utils::utf8ToWin(Lang::get(Lang::file_contents)));
  }

  public function stream($name){
    $this->pdf->Output($name, 'D');
  }

  public function save(){
    $this->pdf->Output($this->fileName, 'F');
    //unset($this->pdf);
    return $this->fileName;
  }
}
?>